#API SERVERLESS FILE

#version pinned to ensure all use same version of framework.
#frameworkVersion: "=1.5"

service: GunShotDetectionSystem

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: eu-west-1
  #profile: development
  #for Development on Serverless Framework. provides full acccess to ApiGateway, DynamoDb and S3.
  role: arn:aws:iam::350584043451:role/ServerlessFrameworkUser
  #iamRoleStatements: # permissions for all of your functions can be set here
  #    - Effect: Allow
  #      Action: # Gives permission to DynamoDB tables in a specific region
  #        - dynamodb:DescribeTable
  #        - dynamodb:Query
  #        - dynamodb:Scan
  #        - dynamodb:GetItem
  #        - dynamodb:PutItem
  #        - dynamodb:UpdateItem
  #        - dynamodb:DeleteItem
  #      Resource: "arn:aws:dynamodb:us-east-1:*:*"


functions:
  ModuleStatusGet:
    handler: api/ModuleStatus.moduleStatus
    events:
      - http:
          path: api/ModuleStatus
          method: get
          cors: true
  ModuleStatusPost:
    handler: api/ModuleStatus.moduleStatus
    events:
      - http:
          path: api/ModuleStatus
          method: post
          cors: true
  ModuleEvent:
    handler: api/ModuleEvent.moduleEvent
    events:
      - http:
          path: api/ModuleEvent
          method: post
          cors: true
  ModuleUpdate:
    handler: api/ModuleUpdate.moduleUpdate
    events:
      - http:
          path: api/ModuleUpdate
          method: get
          cors: true
  ModuleError:
    handler: api/ModuleError.moduleError
    events:
      - http:
          path: api/ModuleError
          method: post
          cors: true
  Events:
    handler: api/Events.events
    events:
      - http:
          path: api/Events
          method: get
          cors: true
  Cameras:
    handler: api/Cameras.cameras
    events:
      - http:
          path: api/Cameras
          method: get
          cors: true
  Audio:
    handler: api/Audio.audio
    events:
      - http:
          path: api/Audio
          method: get
          cors: true
  Report:
    handler: api/Report.report
    events:
      - http:
          path: api/Report
          method: get
          cors: true
  Incidents:
    handler: api/Incidents.incidents
    events:
      - http:
          path: api/Incidents
          method: get
          cors: true
  Incident:
    handler: api/Incident.incident
    events:
      - http:
          path: api/Incident
          method: get
          cors: true
  IncidentClose:
    handler: api/IncidentClose.incidentclose
    events:
      - http:
          path: api/IncidentClose
          method: post
          cors: true
  MergeIncidents:
    handler: api/MergeIncidents.mergeIncidents
    events:
      - http:
          path: api/mergeIncidents
          method: put
          cors: true

